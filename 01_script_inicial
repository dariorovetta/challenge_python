import time
import os
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

# Configurar el driver de Selenium (Chrome)
options = Options()
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

# URL de la página de noticias
url = "https://www.yogonet.com/international/"
driver.get(url)

# Lista para almacenar los datos
news_data = []

# Encuentra los elementos que contienen las noticias
articles = driver.find_elements(By.CSS_SELECTOR, ".contenedor_dato_modulo")
print("Cantidad de artículos encontrados:", len(articles))

for article in articles:
    try:
        # Intentar extraer el título
        try:
            title = article.find_element(By.CSS_SELECTOR, ".volanta.fuente_roboto_slab").text
        except:
            title = None  # Si no se encuentra, se deja como None

        # Extraer kicker, imagen y enlace
        kicker = article.find_element(By.CSS_SELECTOR, ".titulo.fuente_roboto_slab").text
        image = article.find_element(By.CSS_SELECTOR, ".imagen img").get_attribute("src")
        link = article.find_element(By.CSS_SELECTOR, ".titulo.fuente_roboto_slab a").get_attribute("href")

        # Agregar a la lista
        news_data.append({
            "Title": title,
            "Kicker": kicker,
            "Image": image,
            "Link": link
        })
    except Exception as e:
        print(f"Error al extraer datos de una noticia: {e}")

# Cerrar el navegador
driver.quit()

# Ruta de almacenamiento del archivo
output_path = "05_challenge_we_are_pipol_python/noticias.xlsx"

# Asegurar que la carpeta existe
os.makedirs(os.path.dirname(output_path), exist_ok=True)

# Crear un DataFrame con pandas y guardar en Excel
df = pd.DataFrame(news_data)
df.to_excel(output_path, index=False)

print(f"Los datos se guardaron correctamente en {output_path}")

# -----------------------
# SEGUNDA ETAPA: ACTUALIZAR TITULOS QUE SON None
# -----------------------

# Volver a abrir el navegador
driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

# Cargar el Excel
df = pd.read_excel(output_path)

for index, row in df.iterrows():
    if pd.isna(row["Title"]):  # Si el título es None o NaN
        try:
            driver.get(row["Link"])  # Ir a la noticia
            time.sleep(2)  # Esperar a que cargue la página

            # Intentar extraer el título desde el XPath dado
            try:
                title = driver.find_element(By.XPATH, "/html/body/div[4]/div[5]/div/div[2]/div").text
            except:
                title = "Título no encontrado"

            # Actualizar el DataFrame
            df.at[index, "Title"] = title
            print(f"Título actualizado para: {row['Link']} → {title}")

        except Exception as e:
            print(f"Error al actualizar título para {row['Link']}: {e}")

# Guardar el archivo actualizado
df.to_excel(output_path, index=False)
print(f"Archivo actualizado correctamente en {output_path}")

# Cerrar el navegador
driver.quit()
